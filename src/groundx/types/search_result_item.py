# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .bounding_box_detail import BoundingBoxDetail
from .search_result_item_pages_item import SearchResultItemPagesItem


class SearchResultItem(UniversalBaseModel):
    bounding_boxes: typing.Optional[typing.List[BoundingBoxDetail]] = pydantic.Field(
        alias="boundingBoxes", default=None
    )
    """
    Coordinates corresponding to the areas of the document where the chunk appears
    """

    bucket_id: typing.Optional[int] = pydantic.Field(alias="bucketId", default=None)
    """
    Content bucket the search result belongs to
    """

    chunk_id: typing.Optional[str] = pydantic.Field(alias="chunkId", default=None)
    """
    Unique system generated ID for the chunk
    """

    document_id: typing.Optional[str] = pydantic.Field(alias="documentId", default=None)
    """
    Unique system generated ID for the document
    """

    file_name: typing.Optional[str] = pydantic.Field(alias="fileName", default=None)
    """
    Name of ingested file
    """

    multimodal_url: typing.Optional[str] = pydantic.Field(alias="multimodalUrl", default=None)
    """
    An image clipping of the table or figure object from the document
    """

    page_images: typing.Optional[typing.List[str]] = pydantic.Field(alias="pageImages", default=None)
    pages: typing.Optional[typing.List[SearchResultItemPagesItem]] = None
    score: typing.Optional[float] = pydantic.Field(default=None)
    """
    Confidence score in the search result
    """

    search_data: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(
        alias="searchData", default=None
    )
    """
    Document, section, and chunk search data, both custom and system-generated
    """

    source_url: typing.Optional[str] = pydantic.Field(alias="sourceUrl", default=None)
    """
    Source document URL
    """

    suggested_text: typing.Optional[str] = pydantic.Field(alias="suggestedText", default=None)
    """
    System-generated text, re-written for LLM completions
    """

    text: typing.Optional[str] = pydantic.Field(default=None)
    """
    Original text from the source document
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
