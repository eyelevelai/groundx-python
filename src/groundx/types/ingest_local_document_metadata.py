# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .document_type import DocumentType
from .process_level import ProcessLevel


class IngestLocalDocumentMetadata(UniversalBaseModel):
    bucket_id: typing.Optional[int] = pydantic.Field(alias="bucketId", default=None)
    """
    The bucketId of the bucket which this local file will be ingested into.
    """

    file_name: typing.Optional[str] = pydantic.Field(alias="fileName", default=None)
    """
    The name of the file being ingested
    """

    file_type: typing.Optional[DocumentType] = pydantic.Field(alias="fileType", default=None)
    filter: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    A dictionary of key-value pairs that can be used to pre-filter documents prior to a search.
    """

    process_level: typing.Optional[ProcessLevel] = pydantic.Field(alias="processLevel", default=None)
    search_data: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(
        alias="searchData", default=None
    )
    """
    Custom metadata which can be used to influence GroundX's search functionality. This data can be used to further hone GroundX search.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
